// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: pkg/grpc/insurance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InsuranceClient is the client API for Insurance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsuranceClient interface {
	CreateInsurance(ctx context.Context, in *NewInsurance, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Payoff(ctx context.Context, in *NewPayoff, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetInsuranceData(ctx context.Context, in *InsuranceOwner, opts ...grpc.CallOption) (*InsuranceData, error)
}

type insuranceClient struct {
	cc grpc.ClientConnInterface
}

func NewInsuranceClient(cc grpc.ClientConnInterface) InsuranceClient {
	return &insuranceClient{cc}
}

func (c *insuranceClient) CreateInsurance(ctx context.Context, in *NewInsurance, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Insurance/CreateInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insuranceClient) Payoff(ctx context.Context, in *NewPayoff, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Insurance/Payoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insuranceClient) GetInsuranceData(ctx context.Context, in *InsuranceOwner, opts ...grpc.CallOption) (*InsuranceData, error) {
	out := new(InsuranceData)
	err := c.cc.Invoke(ctx, "/Insurance/GetInsuranceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsuranceServer is the server API for Insurance service.
// All implementations must embed UnimplementedInsuranceServer
// for forward compatibility
type InsuranceServer interface {
	CreateInsurance(context.Context, *NewInsurance) (*emptypb.Empty, error)
	Payoff(context.Context, *NewPayoff) (*emptypb.Empty, error)
	GetInsuranceData(context.Context, *InsuranceOwner) (*InsuranceData, error)
	mustEmbedUnimplementedInsuranceServer()
}

// UnimplementedInsuranceServer must be embedded to have forward compatible implementations.
type UnimplementedInsuranceServer struct {
}

func (UnimplementedInsuranceServer) CreateInsurance(context.Context, *NewInsurance) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInsurance not implemented")
}
func (UnimplementedInsuranceServer) Payoff(context.Context, *NewPayoff) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payoff not implemented")
}
func (UnimplementedInsuranceServer) GetInsuranceData(context.Context, *InsuranceOwner) (*InsuranceData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsuranceData not implemented")
}
func (UnimplementedInsuranceServer) mustEmbedUnimplementedInsuranceServer() {}

// UnsafeInsuranceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsuranceServer will
// result in compilation errors.
type UnsafeInsuranceServer interface {
	mustEmbedUnimplementedInsuranceServer()
}

func RegisterInsuranceServer(s grpc.ServiceRegistrar, srv InsuranceServer) {
	s.RegisterService(&Insurance_ServiceDesc, srv)
}

func _Insurance_CreateInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInsurance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsuranceServer).CreateInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Insurance/CreateInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsuranceServer).CreateInsurance(ctx, req.(*NewInsurance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Insurance_Payoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPayoff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsuranceServer).Payoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Insurance/Payoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsuranceServer).Payoff(ctx, req.(*NewPayoff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Insurance_GetInsuranceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsuranceOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsuranceServer).GetInsuranceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Insurance/GetInsuranceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsuranceServer).GetInsuranceData(ctx, req.(*InsuranceOwner))
	}
	return interceptor(ctx, in, info, handler)
}

// Insurance_ServiceDesc is the grpc.ServiceDesc for Insurance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Insurance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Insurance",
	HandlerType: (*InsuranceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInsurance",
			Handler:    _Insurance_CreateInsurance_Handler,
		},
		{
			MethodName: "Payoff",
			Handler:    _Insurance_Payoff_Handler,
		},
		{
			MethodName: "GetInsuranceData",
			Handler:    _Insurance_GetInsuranceData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/insurance.proto",
}
