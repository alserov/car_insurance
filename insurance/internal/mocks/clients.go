// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\clients\clients.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/alserov/car_insurance/insurance/internal/service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRecognitionClient is a mock of RecognitionClient interface.
type MockRecognitionClient struct {
	ctrl     *gomock.Controller
	recorder *MockRecognitionClientMockRecorder
}

// MockRecognitionClientMockRecorder is the mock recorder for MockRecognitionClient.
type MockRecognitionClientMockRecorder struct {
	mock *MockRecognitionClient
}

// NewMockRecognitionClient creates a new mock instance.
func NewMockRecognitionClient(ctrl *gomock.Controller) *MockRecognitionClient {
	mock := &MockRecognitionClient{ctrl: ctrl}
	mock.recorder = &MockRecognitionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecognitionClient) EXPECT() *MockRecognitionClientMockRecorder {
	return m.recorder
}

// CalcDamageMultiplier mocks base method.
func (m *MockRecognitionClient) CalcDamageMultiplier(ctx context.Context, image []byte) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcDamageMultiplier", ctx, image)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcDamageMultiplier indicates an expected call of CalcDamageMultiplier.
func (mr *MockRecognitionClientMockRecorder) CalcDamageMultiplier(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcDamageMultiplier", reflect.TypeOf((*MockRecognitionClient)(nil).CalcDamageMultiplier), ctx, image)
}

// CheckIfCarIsOK mocks base method.
func (m *MockRecognitionClient) CheckIfCarIsOK(ctx context.Context, image []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfCarIsOK", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIfCarIsOK indicates an expected call of CheckIfCarIsOK.
func (mr *MockRecognitionClientMockRecorder) CheckIfCarIsOK(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfCarIsOK", reflect.TypeOf((*MockRecognitionClient)(nil).CheckIfCarIsOK), ctx, image)
}

// MockContractClient is a mock of ContractClient interface.
type MockContractClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractClientMockRecorder
}

// MockContractClientMockRecorder is the mock recorder for MockContractClient.
type MockContractClientMockRecorder struct {
	mock *MockContractClient
}

// NewMockContractClient creates a new mock instance.
func NewMockContractClient(ctrl *gomock.Controller) *MockContractClient {
	mock := &MockContractClient{ctrl: ctrl}
	mock.recorder = &MockContractClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractClient) EXPECT() *MockContractClientMockRecorder {
	return m.recorder
}

// CreateInsurance mocks base method.
func (m *MockContractClient) CreateInsurance(ctx context.Context, ins models.Insurance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInsurance", ctx, ins)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInsurance indicates an expected call of CreateInsurance.
func (mr *MockContractClientMockRecorder) CreateInsurance(ctx, ins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsurance", reflect.TypeOf((*MockContractClient)(nil).CreateInsurance), ctx, ins)
}

// GetCommits mocks base method.
func (m *MockContractClient) GetCommits(ctx context.Context) chan models.OutboxItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommits", ctx)
	ret0, _ := ret[0].(chan models.OutboxItem)
	return ret0
}

// GetCommits indicates an expected call of GetCommits.
func (mr *MockContractClientMockRecorder) GetCommits(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommits", reflect.TypeOf((*MockContractClient)(nil).GetCommits), ctx)
}

// Payoff mocks base method.
func (m *MockContractClient) Payoff(ctx context.Context, payoff models.Payoff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payoff", ctx, payoff)
	ret0, _ := ret[0].(error)
	return ret0
}

// Payoff indicates an expected call of Payoff.
func (mr *MockContractClientMockRecorder) Payoff(ctx, payoff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payoff", reflect.TypeOf((*MockContractClient)(nil).Payoff), ctx, payoff)
}
