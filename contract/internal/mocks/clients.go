// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\clients\clients.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/alserov/car_insurance/contract/internal/service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInsuranceClient is a mock of InsuranceClient interface.
type MockInsuranceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInsuranceClientMockRecorder
}

// MockInsuranceClientMockRecorder is the mock recorder for MockInsuranceClient.
type MockInsuranceClientMockRecorder struct {
	mock *MockInsuranceClient
}

// NewMockInsuranceClient creates a new mock instance.
func NewMockInsuranceClient(ctrl *gomock.Controller) *MockInsuranceClient {
	mock := &MockInsuranceClient{ctrl: ctrl}
	mock.recorder = &MockInsuranceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsuranceClient) EXPECT() *MockInsuranceClientMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockInsuranceClient) Commit(ctx context.Context, commit models.OutboxItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, commit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockInsuranceClientMockRecorder) Commit(ctx, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockInsuranceClient)(nil).Commit), ctx, commit)
}

// GetNewInsurances mocks base method.
func (m *MockInsuranceClient) GetNewInsurances(ctx context.Context) <-chan models.NewInsurance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewInsurances", ctx)
	ret0, _ := ret[0].(<-chan models.NewInsurance)
	return ret0
}

// GetNewInsurances indicates an expected call of GetNewInsurances.
func (mr *MockInsuranceClientMockRecorder) GetNewInsurances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewInsurances", reflect.TypeOf((*MockInsuranceClient)(nil).GetNewInsurances), ctx)
}

// GetPayoffs mocks base method.
func (m *MockInsuranceClient) GetPayoffs(ctx context.Context) <-chan models.Payoff {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayoffs", ctx)
	ret0, _ := ret[0].(<-chan models.Payoff)
	return ret0
}

// GetPayoffs indicates an expected call of GetPayoffs.
func (mr *MockInsuranceClientMockRecorder) GetPayoffs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayoffs", reflect.TypeOf((*MockInsuranceClient)(nil).GetPayoffs), ctx)
}

// MockContractClient is a mock of ContractClient interface.
type MockContractClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractClientMockRecorder
}

// MockContractClientMockRecorder is the mock recorder for MockContractClient.
type MockContractClientMockRecorder struct {
	mock *MockContractClient
}

// NewMockContractClient creates a new mock instance.
func NewMockContractClient(ctrl *gomock.Controller) *MockContractClient {
	mock := &MockContractClient{ctrl: ctrl}
	mock.recorder = &MockContractClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractClient) EXPECT() *MockContractClientMockRecorder {
	return m.recorder
}

// Insure mocks base method.
func (m *MockContractClient) Insure(ctx context.Context, ins models.NewInsurance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insure", ctx, ins)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insure indicates an expected call of Insure.
func (mr *MockContractClientMockRecorder) Insure(ctx, ins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insure", reflect.TypeOf((*MockContractClient)(nil).Insure), ctx, ins)
}

// Payoff mocks base method.
func (m *MockContractClient) Payoff(ctx context.Context, pay models.Payoff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payoff", ctx, pay)
	ret0, _ := ret[0].(error)
	return ret0
}

// Payoff indicates an expected call of Payoff.
func (mr *MockContractClientMockRecorder) Payoff(ctx, pay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payoff", reflect.TypeOf((*MockContractClient)(nil).Payoff), ctx, pay)
}
