// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\db\repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/alserov/car_insurance/contract/internal/service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOutbox is a mock of Outbox interface.
type MockOutbox struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxMockRecorder
}

// MockOutboxMockRecorder is the mock recorder for MockOutbox.
type MockOutboxMockRecorder struct {
	mock *MockOutbox
}

// NewMockOutbox creates a new mock instance.
func NewMockOutbox(ctrl *gomock.Controller) *MockOutbox {
	mock := &MockOutbox{ctrl: ctrl}
	mock.recorder = &MockOutboxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutbox) EXPECT() *MockOutboxMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOutbox) Create(ctx context.Context, item models.OutboxItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOutboxMockRecorder) Create(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOutbox)(nil).Create), ctx, item)
}

// Delete mocks base method.
func (m *MockOutbox) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOutboxMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOutbox)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockOutbox) Get(ctx context.Context, status, groupID int) ([]models.OutboxItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, status, groupID)
	ret0, _ := ret[0].([]models.OutboxItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOutboxMockRecorder) Get(ctx, status, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOutbox)(nil).Get), ctx, status, groupID)
}
